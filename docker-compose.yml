version: '3.8'

# Docker Compose configuration for the Online Examination System
#
# Defines services for the ASP.NET Core API (api), the React client
# (client) and the SQL Server database (db).  Adjust image tags,
# ports and environment variables as needed for your environment.
services:
  # SQL Server instance for persistence
  db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: exam-db
    environment:
      # Accept the SQL Server EULA
      - ACCEPT_EULA=Y
      # Strong SA password; change this for production
      - MSSQL_SA_PASSWORD=Your_strong_password123
    ports:
      # Expose SQL Server on the host for debugging (optional)
      - "1433:1433"
    volumes:
      # Mount the ./db folder containing schema and seed scripts.  The
      # official image will execute *.sql files in this directory on
      # container startup.  This allows automatic database creation.
      - ./db:/var/opt/mssql/data

  # Backend API service
  api:
    build:
      context: ./api
      # Assumes a Dockerfile is present in the api directory that
      # restores, builds and publishes the ASP.NET Core application.
    container_name: exam-api
    depends_on:
      - db
    environment:
      # ASP.NET Core environment
      - ASPNETCORE_ENVIRONMENT=Production
      # Connection string using the db service hostname.  Adjust user
      # credentials and database name to match your schema.
      - ConnectionStrings__Default=Server=db;Database=OnlineExamDb;User Id=sa;Password=Your_strong_password123;Trusted_Connection=False;Encrypt=False
    ports:
      # Map container port 80 (default for ASP.NET) to host port 5000
      - "5000:80"

  # Frontend client service
  client:
    build:
      context: ./client
      # Expects a Dockerfile in the client directory that performs an
      # npm install and produces a production build served by a static
      # server (e.g. nginx or serve).  Alternatively use the `node`
      # image and run `npm run dev` for development.
    container_name: exam-client
    depends_on:
      - api
    environment:
      # Expose the API base URL to the Vite build so it can be used
      # in API calls (see useApi.ts).  The `api` hostname resolves to
      # the api service within the docker network.
      - VITE_API_BASE_URL=http://api
    ports:
      # Expose the client on port 3000 for development or port 80 for
      # production depending on your Dockerfile.  Adjust as needed.
      - "5173:80"

networks:
  default:
    # Use the default network so services can communicate by name
    driver: bridge